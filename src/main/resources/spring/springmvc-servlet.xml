<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!--1  对包下的进行扫描，以完成bean的创建和依赖注入 -->
    <context:component-scan base-package="com.hengzhiyi.it"><!-- 放在spring的contextLoaderListener指定的资源中较好 -->
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    	<!-- 不装配以下注解 -->
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    	<!-- 注：这个注解还不能被过滤，如果过滤了，会出现请求servlet控制器时找路径不到，出现404 -->
    	<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Component"/> -->
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    	<context:exclude-filter type="annotation" expression="javax.inject.Named"/>
    </context:component-scan>

    <!--2 激活@Controller模式,并开启matrix变量,enable-matrix-variables默认为false -->
    <!-- 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean，可以注释掉不使用这种配置，重新配置HandlerAdapter和HandlerMapping,如下3、4;5,6所示 -->
    <!-- <mvc:annotation-driven enable-matrix-variables="true"/> -->
    <mvc:annotation-driven enable-matrix-variables="true">
    	<!-- 配置全局解决 SpringMVC返回文本时浏览器上出现中文乱码的问题(原因是StringHttpMessageConverter中的默认编码(defaultCharset)是iso-8859-1，看源码可知) -->
    	<mvc:message-converters register-defaults="true">
    		<bean class="org.springframework.http.converter.StringHttpMessageConverter">
    			<constructor-arg value="UTF-8"/>
    		</bean>
    		<!-- springMVC 4.2.3中需要列出这个且需要依赖(com.fasterxml.jackson.core下的jackson-core和jackson-databind，且版本最新的2.7.0还不行,使用2.4.3可以)，否则控制器@ResponseBody将对象转成json时会出现转换失败， -->
    		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
    	</mvc:message-converters>
    </mvc:annotation-driven>
    
    <!--4 自定义配置HandlerMapping,可以修改属性，如下增加了自定义的拦截器-->
    <bean id="casasas" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    	<!-- 自定义个局部拦截器 -->
    	<!-- <property name="interceptors">
    		<list>
    			<bean class="com.hengzhiyi.it.interceptor.SimpleInterceptor"/>
    		</list>
    	</property> -->											    
    </bean>

	<!--5 用于支持Servlet、JSP视图解析 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，则该该jsp视图页面应该存放在“WEB-INF/jsp/hello.jsp  -->
		<property name="prefix" value="/pages/"></property>
		<property name="suffix" value=".jsp"></property>
		<!-- JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
	</bean>
	
	<!--6  定义拦截器，这样定义的话，相当于为每个handlerMapping添加拦截器,有点全局的意思,也可以在申明的handlerMapping中指定拦截器 -->
	<mvc:interceptors>
		<!-- <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" /> -->
		<mvc:interceptor>
			<!-- 匹配所有的URL,也可以不用配置此mapping -->
			<mvc:mapping path="/**"/>
			
			<!-- 不拦截 的URL-->
			<mvc:exclude-mapping path="/login/**"/>
			<mvc:exclude-mapping path="/userLogin/**"/>
			<mvc:exclude-mapping path="/css/**"/>
			<mvc:exclude-mapping path="/images/**"/>
			<mvc:exclude-mapping path="/js/**"/>
			<mvc:exclude-mapping path="/resources/**"/>
			<!-- <mvc:exclude-mapping path="/pages/**"/> -->
			<mvc:exclude-mapping path="/plugins/**"/>
			<!-- 不拦截测试路径 -->
			<mvc:exclude-mapping path="/test/**"/>
			<mvc:exclude-mapping path="/demo/**"/>
			<!-- 不拦截对外开放路径 -->
			<mvc:exclude-mapping path="/ws/**"/>
			<mvc:exclude-mapping path="/app/**"/>
			<bean class="com.hengzhiyi.it.pic.interceptor.SecurityInterceptor"/>
		</mvc:interceptor>
		<!-- app请求拦截 -->
		<mvc:interceptor>
	        <mvc:mapping path="/app/**"/>
	        <mvc:exclude-mapping path="/app/userLogin/**"/>
	        <mvc:exclude-mapping path="/app/userLoginOut/**"/>
	        <mvc:exclude-mapping path="/app/getSysSettings/**"/>
	        <bean class="com.hengzhiyi.it.pic.interceptor.AppSecurityInterceptor" />
    	</mvc:interceptor>
	</mvc:interceptors>
	
	<!--7  对静态资源的处理方法一，如果web.xml中DispatcherServlet配置的处理URL为:/,/*(Rest风格的URL)时会出现静态资源找不到 ,
		此配置会把"/**" url,注册到SimpleUrlHandlerMapping的urlMap中,把对静态资源的访问由HandlerMapping转到org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler处理并返回.
		DefaultServletHttpRequestHandler使用就是各个Servlet容器自己的默认Servlet
	-->
	<!-- 推荐这种 -->
	<mvc:default-servlet-handler />
	
	<!--8  配置支持文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <!-- one of the properties available; the maximum file size in bytes -->
	    <property name="maxUploadSize" value="20971520"/><!-- 最大支持20M文件 -->
	    <property name="defaultEncoding" value="UTF-8"></property><!-- 默认编码 -->
	    <!-- <property name="maxInMemorySize" value="100000"></property> -->
	</bean>
	
</beans>



