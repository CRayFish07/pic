<?xml version="1.0" encoding="UTF-8"?>
<!-- web 2.3 xml
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
 <web-app>
 -->
<web-app 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
	version="3.0">
	
  <description>图片管理系统</description>
  <!-- 支持tomcat集群session复制 -->
  <distributable/>
  <display-name></display-name>
  <!-- 默认系统界面 -->
  <welcome-file-list>
    <!-- <welcome-file>/pages/home/index.jsp</welcome-file> -->
    <!-- <welcome-file>/pages/login/login.jsp</welcome-file> -->
    <welcome-file>index</welcome-file>
  </welcome-file-list>
  
  <!-- 在web容器里定义系统错误页面(也可以在springMVC的controller中用@ExceptionHandler(Exception.class)定义一个全局的Exception处理对象,如果BaseController中的handleExceltion) -->
  <error-page>
    <error-code>500</error-code>
    <location>/page/common/500.jsp</location>
  </error-page>
  
  <!-- 配置jsp页面是否执行el表达式（false:执行,true:不执行） -->
  <jsp-config>
    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>
      <el-ignored>false</el-ignored>
    </jsp-property-group>
  </jsp-config>
  
  <!-- log4j 配置 begin (最好放在最前面，以免后面的用到时打印不出日志信息)-->
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:/log4j.properties</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <!-- log4j 配置 end -->
  
  <!-- spring Web MVC框架提供了org.springframework.web.filter.CharacterEncodingFilter用于解决POST方式造成的中文乱码问题 -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- 过滤器  begin-->
  <!-- 拦截jsp过滤器 -->
  <filter>
  	<filter-name>securityFilter</filter-name>
  	<filter-class>com.hengzhiyi.it.pic.interceptor.SecurityFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>securityFilter</filter-name>
  	<url-pattern>*.jsp</url-pattern>
  </filter-mapping>
  <!-- 过滤器  end-->
  
  <!-- 系统JNDI信息监听器 begin(注:需放在spring的ContextLoaderListener之前执行) -->
  <listener>
  	<listener-class>com.hengzhiyi.it.pic.listener.SysJndiEnvListener</listener-class>
  </listener>
  <!-- 系统JNDI信息监听器 end -->
  
  <!-- Spring的ContextLoaderListener加载时的参数 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:/spring/applicationContext.xml</param-value>
  </context-param>
  <!-- spring 监听器 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <!-- spring mvc 配置 -->
  <servlet>
    <servlet-name>springmvcServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath*:/spring/springmvc-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springmvcServlet</servlet-name>
    <!-- 为了使上面的welcom-file-list中的指定的非静态URL生效，如果不配置，则只能配置html,jsp等URL -->
     <url-pattern>/index</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>springmvcServlet</servlet-name>
    <!-- 如果下面配置成 "/",则会出现输入ip:port/contextPath时web.xml中配置的welcom-file失效问题，且访问静态资源时也会出现404错误，
		原因为：配置成"/"即是吧所有的请求都交给SpringMVC 的DispatcherServle处理(包括静态资源)，
	 -->
  	<!-- <url-pattern>/*.do</url-pattern> -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <!-- session超时配置 begin -->
  <session-config>
  	<!-- 空闲60分钟 -->
  	<!-- <session-timeout>60</session-timeout> -->
  	<session-timeout>-1</session-timeout>
  </session-config>
  <!-- session超时配置 end -->
  
  <!-- 自定义区域 begin -->
  <!-- request 监听器 begin -->
  <listener>
  	<listener-class>com.hengzhiyi.it.pic.listener.SysRequestListener</listener-class>
  </listener>
  <!-- request 监听器 end -->
  <!-- session 监听器  begin-->
  <listener>
  	<listener-class>
		com.hengzhiyi.it.pic.listener.SysSessionListener
  	</listener-class>
  </listener>
  <!-- session 监听器 end -->
  
  <!-- JNDI资源关联 -->
  <!-- 1.系统JNDI数据源 -->
  <resource-ref>
    <description>this is a jndi resource</description>
    <res-ref-name>jdbc/pic_ds</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  
  <!-- 2.系统其他JNDI资源 -->
  <resource-env-ref>
	 <description>
	    other jndi resource of application.
	 </description>
	 <resource-env-ref-name>
	    bean/appConfig
	 </resource-env-ref-name>
	 <resource-env-ref-type>
	    com.hengzhiyi.it.pic.common.JndiEnvBean
	 </resource-env-ref-type>
	</resource-env-ref>
  <!-- 自定义区域 end -->
</web-app>




















